#!/usr/bin/env python3

import logging
import os
import subprocess as sp
import sys

from pathlib import Path


os.environ['CLOUDSDK_PYTHON'] = 'python'
log = logging.getLogger(__name__)


global global_prev_project, global_cur_project
CWD = Path.cwd()


def exec_cmd(cmd, get_output=False, exit_on_error=True, silent=False):
    try:
        exe = sp.check_output if get_output else sp.check_call
        cmd = ' '.join(cmd)

        if not silent:
            log.info('exec_cmd -> {}'.format(cmd))

        out = exe([cmd], shell=True)
        return out.decode('utf8').strip() if get_output else True
    except Exception as err:
        print(err)
        log.error(err)
        if exit_on_error:
            global global_prev_project
            set_project(global_prev_project)
            sys.exit(1)
        return False


def get_project():
    out = exec_cmd([
        'gcloud config',
        'get-value',
        'project',
    ], get_output=True, silent=True)
    return out


def set_project(project_name):
    exec_cmd([
        'gcloud config',
        'set project',
        project_name,
    ])


def main(args):
    # Execute actions
    global global_prev_project, global_cur_project
    global_prev_project = get_project()
    global_cur_project = args.project_name

    set_project(args.project_name)

    # Call main action
    action_n = args.func.__name__ if hasattr(args, 'func') else ''
    if action_n == 'exec_cmd':
        args.func([args.command])
    else:
        print('Invalid command or missing parameters.')

    set_project(global_prev_project)
    print('Done.')


def set_subparsers(parser):
    subp = parser.add_subparsers(
        title='Resource',
    )
    raw_sp = subp.add_parser(
        'raw',
        description='Execute a raw command.',
        help='Execute a raw command.',
    )
    raw_sp.add_argument(
        'command',
        help='Raw command.',
    )
    raw_sp.set_defaults(func=exec_cmd)

    return parser


if __name__ == '__main__':
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument(
        'project_name',
        help='Set the GCP project name.',
    )
    parser.add_argument(
        '-L', '--log-level',
        default='info',
        help='Set log level.',
    )
    parser.add_argument(
        '--log-file',
        help='Write log to file.',
    )
    parser = set_subparsers(parser)

    # Main
    args = parser.parse_args()

    # Main - Configure logging
    log_config = {
        'format': (
            '[%(asctime)s] %(levelname)s %(module)s %(lineno)d - %(message)s'
        ),
        'level': getattr(logging, args.log_level.upper()),
    }
    if args.log_file:
        log_config['filename'] = args.log_file

    logging.basicConfig(**log_config)

    main(args)
